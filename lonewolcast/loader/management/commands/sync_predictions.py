# sync_predictions.py
from django.core.management.base import BaseCommand
from loader.prediction_service import PredictionService

class Command(BaseCommand):
    help = """
    Synchronise les pr√©dictions des matchs. Options disponibles:
    --all : Synchronise tous les matchs sans pr√©diction
    --upcoming : Synchronise uniquement les matchs √† venir (NS, PST, TBD)
    Sans option : Synchronise tous les matchs sans pr√©diction (comportement par d√©faut)
    """

    def add_arguments(self, parser):
        # Arguments mutuellement exclusifs
        group = parser.add_mutually_exclusive_group()
        group.add_argument(
            '--all',
            action='store_true',
            help='Synchronise tous les matchs sans pr√©diction'
        )
        group.add_argument(
            '--upcoming',
            action='store_true',
            help='Synchronise uniquement les matchs √† venir (NS, PST, TBD)'
        )

    def handle(self, *args, **options):
        try:
            service = PredictionService()

            # Si --upcoming est sp√©cifi√©, on ne traite que les matchs √† venir
            if options['upcoming']:
                self.stdout.write(
                    self.style.HTTP_INFO("üîÑ Recherche des matchs √† venir sans pr√©diction...")
                )
                matches = service.get_upcoming_matches_without_prediction()
                match_type = "√† venir"
            # Sinon (--all ou aucune option), on traite tous les matchs
            else:
                self.stdout.write(
                    self.style.HTTP_INFO("üîÑ Recherche des matchs sans pr√©diction...")
                )
                matches = service.get_matches_without_prediction()
                match_type = "sans pr√©diction"
            
            if not matches:
                self.stdout.write(
                    self.style.SUCCESS(f"‚úÖ Tous les matchs {match_type} ont d√©j√† des pr√©dictions")
                )
                return
                
            total = len(matches)
            self.stdout.write(
                self.style.HTTP_INFO(f"üìù {total} match(s) {match_type} trouv√©(s)")
            )
            
            synced = service.sync_predictions(matches)
            
            self.stdout.write(
                self.style.SUCCESS(f"\n‚úÖ Synchronisation termin√©e : {synced}/{total} pr√©dictions ajout√©es")
            )
            
        except Exception as e:
            self.stderr.write(
                self.style.ERROR(f'‚ùå Erreur lors de la synchronisation: {str(e)}')
            )